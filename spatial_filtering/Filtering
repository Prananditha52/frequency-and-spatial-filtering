import numpy as np
import math as mt

class Filtering:

    def __init__(self, image):
        self.image = image

    def get_gaussian_filter(self):
        """Initialzes and returns a 5X5 Gaussian filter
            Use the formula for a 2D gaussian to get the values for a 5X5 gaussian filter
        """
        Gaussian_filter=np.zeros((5,5),dtype=float)
        x = -2
        for i in range(5):
            y = -2
            for j in range(5):
                Gaussian_filter[i,j]=(1/(2*mt.pi*(1.0)**2))*np.exp(-(x**2+y**2)/(2*(1.0)**2))
                y+=1
            x+=1
        
        return Gaussian_filter

   

    def get_laplacian_filter(self):
        """Initialzes and returns a 3X3 Laplacian filter"""
        laplacian_filter=[[-1,-1,-1],[-1,8,-1],[-1,-1,-1]]
        return np.asarray(laplacian_filter)

    def filter(self, filter_name):
        """Perform filtering on the image using the specified filter, and returns a filtered image
            takes as input:
            filter_name: a string, specifying the type of filter to use ["gaussian", laplacian"]
            return type: a 2d numpy array
                """
        image =self.image
        if filter_name == "gaussian":
            gussian_filter=self.get_gaussian_filter()
            new_img = np.zeros((np.shape(image)[0] + 4, np.shape(image)[1] + 4), np.uint8)
            for i in range(np.shape(image)[0]):
                for j in range(np.shape(image)[1]):
                    new_img[i + 2, j + 2] = image[i, j]
            fliped_gf=np.zeros((np.shape(gussian_filter)[0],np.shape(gussian_filter)[1]))
            s = np.shape(gussian_filter)[0]-1
            for i in range(np.shape(gussian_filter)[0]):
                k=np.shape(gussian_filter)[1]-1
                for j in range(np.shape(gussian_filter)[1]):
                    fliped_gf[s,k]=gussian_filter[i,j]
                    k-=1
                s-=1
            for x in range(image.shape[1]):
                for y in range(image.shape[0]):
                    new_img[y, x] = (fliped_gf * new_img[y: y + 5, x: x + 5]).sum()

            new_img_1 = np.zeros((np.shape(image)[0] , np.shape(image)[1] ), np.uint8)
            for i in range(np.shape(image)[0]):
                for j in range(np.shape(image)[1]):
                    new_img_1[i , j ] = new_img[i+2, j+2]
                    
        if filter_name == "laplacian":
            laplacian_filter = self.get_laplacian_filter()
            fliped_lf = np.zeros((np.shape(laplacian_filter)[0], np.shape(laplacian_filter)[1]))
            s = np.shape(laplacian_filter)[0] - 1
            for i in range(np.shape(laplacian_filter)[0]):
                k = np.shape(laplacian_filter)[1] - 1
                for j in range(np.shape(laplacian_filter)[1]):
                    fliped_lf[s, k] = laplacian_filter[i, j]
                    k -= 1
                s -= 1
            new_img = np.zeros((np.shape(image)[0] + 2, np.shape(image)[1] + 2), np.uint8)
            for i in range(np.shape(image)[0]):
                for j in range(np.shape(image)[1]):
                    new_img[i + 1, j + 1] = image[i, j]
            for x in range(image.shape[1]):
                for y in range(image.shape[0]):
                    new_img[y, x] = (fliped_lf * new_img[y: y + 3, x: x + 3]).sum()
            new_img_1 = np.zeros((np.shape(image)[0] , np.shape(image)[1] ), np.uint8)
            for i in range(np.shape(image)[0]):
                for j in range(np.shape(image)[1]):
                    new_img_1[i , j ] = new_img[i+2, j+2]

        return new_img_1

